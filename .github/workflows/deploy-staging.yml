name: Deploy to staging

on:
  pull_request:
    types: [labeled]

env:
  IMAGE_REGISTRY_URL: ghcr.io
  DOCKER_IMAGE_NAME: fresn3l-azure-ttt
  AZURE_WEBAPP_NAME: fresn3l-ttt-app
  RESOURCE_GROUP: fresn3l-azure-ttt-rg

jobs:
  create-azure-environment:
    if: contains(github.event.pull_request.labels.*.name, 'stage')
    runs-on: ubuntu-latest
    steps:
      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Check if Resource Group Exists
        id: check-rg
        run: |
          if az group exists --name ${{ env.RESOURCE_GROUP }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create Resource Group
        if: steps.check-rg.outputs.exists == 'false'
        run: az group create --name ${{ env.RESOURCE_GROUP }} --location westus
      - name: Check if App Service Plan Exists
        id: check-plan
        run: |
          if az appservice plan show --name fresn3l-ttt-plan --resource-group ${{ env.RESOURCE_GROUP }} --output tsv 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create App Service Plan
        if: steps.check-plan.outputs.exists == 'false'
        run: az appservice plan create --name fresn3l-ttt-plan --resource-group ${{ env.RESOURCE_GROUP }} --sku B1 --is-linux
      - name: Check if Web App Exists
        id: check-webapp
        run: |
          if az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output tsv 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Delete Existing Web App (if exists)
        if: steps.check-webapp.outputs.exists == 'true'
        run: az webapp delete --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --yes
      - name: Create Web App
        if: steps.check-webapp.outputs.exists == 'false' || always()
        run: az webapp create --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --plan fresn3l-ttt-plan --runtime "NODE|20-lts"  # Adjust runtime based on az webapp list-runtimes --os-type linux
      - name: Configure Container Settings
        if: steps.check-webapp.outputs.exists == 'false' || always()
        run: |
          az webapp config container set --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --docker-custom-image-name ${{ env.IMAGE_REGISTRY_URL }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:latest --docker-registry-server-url https://${{ env.IMAGE_REGISTRY_URL }} --docker-registry-server-user ${{ github.actor }} --docker-registry-server-password ${{ secrets.CR_PAT }} --enable-app-service-storage false

  build:
    if: contains(github.event.pull_request.labels.*.name, 'stage')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install serve
      - name: Build and copy files
        run: |
          mkdir -p public
          cp -r public/* public/ || true  # Ensure public directory is populated
      - uses: actions/upload-artifact@v4
        with:
          name: webpack artifacts
          path: public/

  Build-Docker-Image:
    runs-on: ubuntu-latest
    needs: build
    name: Build image and store in GitHub Container Registry
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: webpack artifacts
          path: public
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.IMAGE_REGISTRY_URL}}/${{ github.repository }}/${{env.DOCKER_IMAGE_NAME}}
          tags: |
            type=sha,format=long,prefix=
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Deploy-to-Azure:
    runs-on: ubuntu-latest
    needs: [create-azure-environment, Build-Docker-Image]
    name: Deploy app container to Azure
    steps:
      - name: "Login via Azure CLI"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{env.IMAGE_REGISTRY_URL}}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Deploy web app container
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{env.AZURE_WEBAPP_NAME}}
          resource-group-name: ${{ env.RESOURCE_GROUP }}
          images: ${{env.IMAGE_REGISTRY_URL}}/${{ github.repository }}/${{env.DOCKER_IMAGE_NAME}}:${{ github.sha }}
          slot-name: 'production'
      - name: Configure Web App Ports
        run: az webapp config appsettings set --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings WEBSITES_PORT=8080
      - name: Azure logout via Azure CLI
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear
